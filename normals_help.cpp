#include <iostream>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

int main () {
	
	float tet_4_cv [] = {
		0.28868, 0.28868, 0.28868, 		  	//svi poz
		-0.28868, 0.28868, -0.28868,	    //neg poz neg
		0.28868, -0.28868, -0.28868, 		//poz neg neg
		-0.28868, -0.28868, 0.28868			//neg neg poz
	};
	
	float tet [] = {
		-0.28868, 0.28868, -0.28868,  0.57735, 0.57735, -0.57735,
		0.28868, -0.28868, -0.28868,  0.57735, 0.57735, -0.57735,
		0.28868, 0.28868, 0.28868,   0.57735, 0.57735, -0.57735,
		
		0.28868, 0.28868, 0.28868, -0.57735, 0.57735, 0.57735,
		-0.28868, -0.28868, 0.28868, -0.57735, 0.57735, 0.57735,
		-0.28868, 0.28868, -0.28868,  -0.57735, 0.57735, 0.57735,
		
		-0.28868, 0.28868, -0.28868, -0.57735, -0.57735, -0.57735,
		-0.28868, -0.28868, 0.28868, -0.57735, -0.57735, -0.57735,
		0.28868, -0.28868, -0.28868,-0.57735, -0.57735, -0.57735,
		
		-0.28868, -0.28868, 0.28868, 0.57735, -0.57735, 0.57735,
		0.28868, 0.28868, 0.28868, 0.57735, -0.57735, 0.57735,
		0.28868, -0.28868, -0.28868, 0.57735, -0.57735, 0.57735
	};
	
	float tet_4_cv_alt [] = {
		0.0, 0.0, 1.0,
		2*glm::sqrt(2) /3.0, 0, -1.0/3.0,
		-2*glm::sqrt(2) /3.0, glm::sqrt(6)/3.0, -1.0/3.0,
		-2*glm::sqrt(2) /3.0, -glm::sqrt(6)/3.0, -1.0/3.0
	};
	

	glm::vec3 A(tet_4_cv_alt[0], tet_4_cv_alt[1], tet_4_cv_alt[2]), B(tet_4_cv_alt[3], tet_4_cv_alt[4], tet_4_cv_alt[5]),
	C(tet_4_cv_alt[6], tet_4_cv_alt[7], tet_4_cv_alt[8]), D(tet_4_cv_alt[9],tet_4_cv_alt[10],tet_4_cv_alt[11]);
	
	//strana 1: B, C, A
	//strana 2: A, D, B
	//strana 3: B, D, C
	//strana 4: D, A, C
	
	//p0 = { 0, 1, 2 } -> strana 1
	//p1 = { 0, 2, 3 } -> strana 4
	//p2 = { 0, 3, 1 } -> strana 2
	//p3 = { 1, 3, 2 } -> strana 3
	
	// glm::vec3 n1(glm::normalize(glm::cross( (B-A), (C-A) ))), 
	// n2(glm::normalize(glm::cross( (B-A), (D-A) ))), 
	// n3(glm::normalize(glm::cross( (D-B), (C-B) ))), 
	// n4(glm::normalize(glm::cross( (D-A), (C-A) )));
	
	glm::vec3 n1(glm::normalize(glm::cross( (B-A), (C-A) ))), 
	n2(glm::normalize(glm::cross( (C-A), (D-A) ))), 
	n3(glm::normalize(glm::cross( (D-A), (B-A) ))), 
	n4(glm::normalize(glm::cross( (D-B), (C-B) )));
	
	std::cout << "n1: (" << n1.x << ", " << n1.y << ", " << n1.z << " )\n";
	std::cout << "n2: (" << n2.x << ", " << n2.y << ", " << n2.z << " )\n";
	std::cout << "n3: (" << n3.x << ", " << n3.y << ", " << n3.z << " )\n";
	std::cout << "n4: (" << n4.x << ", " << n4.y << ", " << n4.z << " )\n";
	
	/*
	float tet_fixed [] = {
		-0.28868, 0.28868, -0.28868, -0.57735, -0.57735, 0.57735,
		0.28868, -0.28868, -0.28868, -0.57735, -0.57735, 0.57735,
		0.28868, 0.28868, 0.28868,   -0.57735, -0.57735, 0.57735,
		
		0.28868, 0.28868, 0.28868, -0.57735, 0.57735, 0.57735,
		-0.28868, -0.28868, 0.28868, -0.57735, 0.57735, 0.57735,
		-0.28868, 0.28868, -0.28868,  -0.57735, 0.57735, 0.57735,
		
		-0.28868, 0.28868, -0.28868, 0.57735, 0.57735, 0.57735,
		-0.28868, -0.28868, 0.28868, 0.57735, 0.57735, 0.57735,
		0.28868, -0.28868, -0.28868,0.57735, 0.57735, 0.57735,
		
		-0.28868, -0.28868, 0.28868,0.57735, -0.57735, 0.57735,
		0.28868, 0.28868, 0.28868, 0.57735, -0.57735, 0.57735,
		0.28868, -0.28868, -0.28868, 0.57735, -0.57735, 0.57735
	};
	*/
	
	/*
	
	float tet_fixex_alt [] = {
		0.0, 0.0, 1.0, 0.382546, 0.883452, 0.270501,
		2*glm::sqrt(2) /3.0, 0, -1.0/3.0, 0.382546, 0.883452, 0.270501,
		-2*glm::sqrt(2) /3.0, glm::sqrt(6)/3.0, -1.0/3.0, 0.382546, 0.883452, 0.270501,
		
		0.0, 0.0, 1.0, -0.816497, 0, 0.57735,
		-2*glm::sqrt(2) /3.0, glm::sqrt(6)/3.0, -1.0/3.0, -0.816497, 0, 0.57735,
		-2*glm::sqrt(2) /3.0, -glm::sqrt(6)/3.0, -1.0/3.0, -0.816497, 0, 0.57735,
		
		0.0, 0.0, 1.0, 0.382546, -0.883452, 0.270501, 
		2*glm::sqrt(2) /3.0, 0, -1.0/3.0,0.382546, -0.883452, 0.270501, 
		-2*glm::sqrt(2) /3.0, -glm::sqrt(6)/3.0, -1.0/3.0,0.382546, -0.883452, 0.270501,
		
		2*glm::sqrt(2) /3.0, 0, -1.0/3.0, -0, 0, -1,
		-2*glm::sqrt(2) /3.0, glm::sqrt(6)/3.0, -1.0/3.0, -0, 0, -1, 
		-2*glm::sqrt(2) /3.0, -glm::sqrt(6)/3.0, -1.0/3.0, -0, 0, -1
		
	};
	
	
	*/
	

	return 0;
}